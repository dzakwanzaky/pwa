{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","img","menu","setState","name","angka1","angka2","hasil","console","log","react_default","a","createElement","className","type","placeholder","value","onChange","changeHandler","bind","ref","parseInt","src","width","event","target","_this2","id","items","map","index","style","concat","onClick","clicked","key","calculator","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f32f4c70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n     // active : \"Merah\",\r\n     color: 'Merah',\r\n     img: 'merah.png'\r\n    };\r\n  }\r\n  clicked(menu){\r\n    //untuk memperbarui state sesuai dengan menu yang dipilih\r\n    this.setState({\r\n      name: menu.name,\r\n      color: menu.color,\r\n      img: menu.img,\r\n      angka1 : 0,\r\n      angka2 : 0,\r\n      hasil : 0\r\n      //active: menu,\r\n    });\r\n  }\r\n  \r\n\r\n  calculator(name){\r\n    console.log(name);\r\n    if(name == 'Calculator'){\r\n      \r\n      return (\r\n        <div>\r\n            <span className={\"selected \"+this.state.color}>{this.state.name}\r\n            </span><br></br>\r\n            <input type=\"number\" placeholder=\"angka 1\" value=\r\n             {this.state.angka1} onChange={this.changeHandler.bind(this)}/>\r\n            \r\n                  <select type=\"number\" ref=\"operator\" className=\"form-control\" placeholder=\"input 1\">\r\n                    <option value=\"+\">+</option>\r\n                    <option value=\"-\">+</option>\r\n                    <option value=\"*\">x</option>\r\n                    <option value=\"/\">/</option>\r\n                  </select>\r\n                \r\n            <input type=\"number\" placeholder=\"angka 2\" value=\r\n             {this.state.angka2} onChange={this.changeHandler.bind(this)}/>=\r\n            <span> {parseInt(this.state.angka1)} + {parseInt(this.state.angka2)} </span><br></br>\r\n           \r\n       </div>\r\n      )\r\n    }else{\r\n      return( \r\n      <div>\r\n      Ini adalah <span className = {\"selected \"+this.state.color}>\r\n      {this.state.name}</span> <br></br>\r\n      <br></br>\r\n    <img src={this.state.img} width=\"200\"></img>\r\n    {/*{this.menusaya()}*/}\r\n       </div> );\r\n    }\r\n  }\r\n\r\n  \r\n  changeHandler(event){\r\n    \r\n    this.setState({\r\n      angka1: event.target.value,\r\n    \r\n    });\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\">\r\n        { /* map akan loop sebanyak menu yang didefinisikan*/ }\r\n        {/* kemudian mengembalikan elemen <a/> */}\r\n        <nav className=\"nav\">{this.props.items.map((menu,index) => {\r\n            var style = 'menu';\r\n\r\n            if(this.state.color === menu.color){ // if(this.state.active === menu){\r\n                style = `${style} is-active`;\r\n            }\r\n\r\n            return <a\r\n              className = {style+\" \"+menu.color}\r\n              //bind untuk membuat 'menu' bisa dikirim ke fungsi 'clicked'\r\n              onClick = {this.clicked.bind(this,menu)}\r\n              key = {index}\r\n            >\r\n              {/*{menu.color}*/}\r\n              {menu.name}\r\n            </a>;\r\n          }\r\n        )}\r\n        </nav>\r\n\r\n        <div className = \"info\">\r\n          {this.calculator(this.state.name)}\r\n        </div>\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Custom.css'; //import cssnya\r\nimport App from './App';\r\nimport { appendFile } from 'fs';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//const items = ['Merah','Kuning','Hijau','Biru'];\r\n\r\nconst items = [\r\n  {\r\n    name : \"Summer\",\r\n    color : 'Merah',\r\n    img :'Panas.jpg'\r\n  },\r\n  {\r\n    name : \"Auntum\",\r\n    color : 'Kuning',\r\n    img :'Gugur.jpg'\r\n  },\r\n  {\r\n    name : \"Spring\",\r\n    color : 'Hijau',\r\n    img :'Semi.jpg'\r\n  }, \r\n  {\r\n    name : \"Winter\",\r\n    color : 'Biru',\r\n    img :'Salju.jpg'\r\n  },\r\n  {\r\n    name : \"Calculator\",\r\n    color : 'Grey',\r\n    img :''\r\n  },\r\n];\r\n\r\nReactDOM.render(<App items={items}/>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}